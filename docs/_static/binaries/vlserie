#!/usr/bin/env python
# This script is generated with chut. Do NOT edit this file.
# All your changes will be lost at the next generation.

version = 'unknown'

import base64, json, types, zlib, sys, os
os.environ['CHUTIFIED'] = '1'
PY3 = sys.version_info[0] == 3
_chut_modules = []
_chut_modules.append(('six', 'eJytGl2P27jx3b+CVXColDrGbba4h0O2aLKX3G17yW2bLZA2DQRaor2MZVFHUut1iv73zgxJiZJl\n7zbtIohJzgdnhjOj0VBJkvzNykpaKQxbKc12Gsb1mhWqFMzecst0Wxumana9t7fw85zxumTnSZLM\nZnLbKG2ZaoTmVukwN3sThnbfCDOb5TlvgVrnObtgyStRf+ZbCSyFFdoA0xdLv/THhnZZKL3+QwJk\ndwCXqnZ0Z4vni29h29kTdqNbweSK7QTjWqCMNUrdi3m+mF3//RyoQJhF4CLrlfr47Sd2ccHOQfoV\nA5TvZwz+jNVAn5O4SGT1nNZlbcVa6A4AcwcoKm5Mt4y/bt2Ke0vLjgutLWXN9T6sLvcWTYKAty8/\nvL/6x2sv5ZbfG/lFzERlxKRUS26EW5oWLkXpWKXqdTYhY0pCuhNZXCLoBobZgdRtLfHwJyRHfdzG\nKxK4qbgFn9miPZPP/I4nTmz8e8L+5A6CVzu+N6wF0dn5c+BozaLD6g0AoqfpGXvxgp2fZewZO3OC\n9bZwTK/sbw1rlDFyWYF/KnbL7wRDs6lVSpqz31yE+fU+NzjMbdZvSUZhH1K1/CwKm/XM8a8UK5bn\nlQCHS42oViMw/mlhW10zL2oHtno/xAUm6Yc0y7pFcV+IxrJfwBlXldq91lrpIckTMNAzMNBg8UET\nHZrJ8fru94/i9d35iJezQ8U+QKCRPXhZ5qUq0lVbF3MGI28VSAEvyxIX2q2oLbcQYngknCEmzhaY\nJRAVFxY5cqFIht/A3OWJfKvKthJpzbei537lcoiDzb3lMcztrfCrjK8ghdACnKsFzrbbNA/Mc8d3\nFh0fxRtxMB8R+AnkcZ6R/8y/7H8QptC9i8x635C1tN455iwSF/9wcYFroCL+xHRr0ZMBX4jDJqLU\nwrSVxRBDFjlMVXUn0ixiDfa1JNK832fuCbMoQm5upWHwj2OosXZd7eds2VoGE36nZGm6ZGkRk6+5\nrPvogIOnfWwTbZNFcpL13K6dyd6qO1G+dSfYm+8Bu4EZqhKGYnfxTtUDM7bwPEkjpk6UbNFxGQoV\n5/FoDTijHZD5YRQj0B9SvEwqg18gTOxOhFeECGpEioajG2UPb7iRuwcu2dCUL+EEJJzZf2tNZEsW\ndQNcwcMk+7r1bjpt7m7jr7Y47nzS6rm37mnLI9YUd5T/OHtACjofRwpyENaEINPnPUEZtjpUI7D2\nuI92oymtH1aowzhm1bG8DzqrT60Xx901YHq3XvvstI3ClbZFxw55lTzsyoqtSV0N4oKbipAu5aO/\nQwXDS6rmViAKEDGXiA3VnLOc1kgV8lWsbT66cmoYPEnxnoqlq1+SORtOpML/u5VsPkm/khU8XAgf\nfq1SlcHJsoV1WdNY9jh+dISXrJvWIlqee/o8HzPTfJd3eG5whNuWN6fF8gj4c4SFFmhmf7QTgsHR\nk0yEdpxJ2RZT1FQBkGRHKOPTGJ3MEYp7zev11F6x4j2SGxzh9UU+YD+PgD/Aoufhn3ID5FiceL+A\nW6h6JdcN18Y5yiXNr918mqDZa7Emr4VhjuMpvFtrm7xQaiPFZ64dOk4qucQJghc9+AEOxomGwxGx\nOUK6rXIo++jV0VFsK5rvIbd0K4sO5SiT3jI/3bz9+bqbEXlz3ExO+ErCDkHigeYOMkX5Cl6kfrq5\nuX4v9J3b63CFeBg3neJx+ePVkOBg4SEO7yHEqtGuU2sP8SmuZbFxMRwNGzeaIvi1FS3h/IUGUyha\nNNobE4eTOEYVG2FNLzvN3x8X1G7wjZVwb/zwBFpeSl4pioIfupGHLTzsFDnkY9GzeAOzQzYRzilW\nUH+pCjDxNZk09fMbPw/sBngnGdIx99K5Yz+Ub4B3iqGV92RW9xPIcfUUFWQmY3ltjTuSwTTw6BdP\nnlVdOh5+0J1TXT4gQaV0cauUj3m7ucSVy7ByUO1EckWUp7fYblVdRra9pJVg7VNbRJQnrb8ZOpvd\n/E/utlK1d6s33cgzUEcyWiDdCmP4WiyV94O3bv5KDfwiwjqt1thP7Wboqcdt96DntrqCBJNrtVS2\nfwKMpg5pEa9O8drJ2j8vcz8ErE8z7Ge62hnevMZVo++w+co1qk7nROPfr10Ri+0QVzojFxP6db5/\nkBh5vyBA8gmL5qjQTdxy5rsd2EnBlRT/G3ZReA1v6GKL/ZOOXdfJmJQSUbyUxM7voQXO3DbDdspf\nCeK2WWm1ndho0MUKvYDBrv2LoO9ndVXVqKF10BBDI7rdckjtBbxV+s5LQPAM/yz2E70xzaURo83S\npAZrtcUt8Z2zb3TCvmGk9TxDe8TvqRAa9jbHuhRbyTmNoGCLYPjW4mA4QpgDEib1wwmIo46QYGB2\n3lbWOHiY9QywzNyIPcHxN+mX73jVkkMlbhSB8JwIQoMkagsPVZFbGk5pAiAcTirSTY5pMliYUiWM\nJ9XpZ0dU0l6t2azzFF7e8boQhIr3CfQOfW9n3jHewblGnuECakiRSnvYdJF2gWzSbIY/wHRMNfIU\nZIzturZeqrYu89DNTP3C4Q4e4Gx01Uvv3lv7F+6CVxVfQsYCwCEXXu9T9C9AAt/BpLXBN+cuXOh+\nhpYQhu/QxAfgW63yPIs85KtVWHhvcjK7N/eg0KgfGvYh2040yz1jkjN0kxA3tNb9Ft4kYK0wnHUd\n5ykVomcOZK0fhaXmb4Ay1VrsG/BwSbAPmnUoQIW5AXljsKieNZ6Yv8qi7gWggOppH25ZTOWD7DiF\n0xIpwgYh+CZpuoAc0UQxeZwuIIWnQIjNtIzzv3cz1gUYpE3XPKeYJruhr8G2XO+7p0IXR7BdaPWU\n8z4ZZHjN0W3rov6xG/uM8TVbO9Lh5pRUHrt3CsLPnQQZa7jUXycH7enEOMgjy9QcxpqBl2I86DSB\nB6ysn50lWUfQThLQgr91G1xmnn1iLy7Y2feDiIQK7DneMqZyOiTpBjJN5TybvmTrrhCWGE3P79mK\nG3fLAmZEw1Ft19/5AB7UFXTp+vx3fZPYSxH7rQsdDHSwY2JVTqJA4XaGDRi59obwl8dS0Sy0h/Da\nSi3CjECvkDxA/GSUBqdP4LS9/RVoarAEdeNcmII3IgjY61bc6ljmgXiR5L2kYbHXpMt3yzm6LKKy\nity1omTVwVuC41vnAD50Oy9I6FD5Wk0UePEWXDcAgR+CiEewiBZUa9EVEMXGnNnl+NIANiQY5HSr\neSGWvNjAEwqcplaQkZdTxZsj2ElIjR1NapdRN7lH8/I0YCF7RHCCdZFT9QqPHIB0T/EM52xdqaXx\n9yGVKsxYLTDna0CHAtN9AAHPWU4lr2lA4C4beAsQt+nG/Eq7a0AMWLz7o3k6umV19BcOebHKcc4r\nM8CBbVDQ4+1/gvY8YDpmgcYhcF9pVyfZepYkXlSdiyIFA+BvZxxCcab0nth5G+I+yp3cqQ/As4gZ\n8nBukD7leg27PX262eFoeG43kJdqsXtm7B6qCaI4vIemo2lAN8dh0aiG2vzYDcOjMraElDe46AL0\nSSO5VDHIu/jtjEhLbvko7+LtFYSFNJJ6KYVDmkcfdEx8aIAo7qMLx3LoX80i2q0D7XiNFZP0dcYb\ncIX+1I0Yaw4roDidRawyIvpIPtQb4JEegDoP6XJCh5E8+NXOAIcccWQaYglaT317Qa6CN0b+/Q8l\n3bYGsp0gURm+8fvPZpLo84i6HGkuqE11oDkiPlJzQP1/a04sH6k5SvoIzWETp/ZUQo7YyRqCT5ZY\nB+6ULhmQ0EcdBhsSFExpNmSLssdKjvIfiqPXlEAPdj80JuCcMuZjDBr+llrwTSzocSEhXVSyjr55\nSpN/1skw0CjxxxgsOfXZTc8SWU1yAg4TwXbobi5ciWrCRQ/xnZN7AfpsBwch5+EsRA2nCqUYWdwc\nZik54ciUZkCYoV3cMnCJkg8tgRiQuruSxaf/uavFnd9BFele6X1qDi8tVBpAicjpvTPFkcuRF4OP\ntYDiEg4ZntGcoP41FalhpaMf1+4ISJN3Yod3PRD8KdLOszn717+z2X8A63ZYPA==\n'))
_chut_modules.append(('docopt', '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\n'))
_chut_modules.append(('ConfigObject', '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\nHpp7vcBJLTMSBP8F6/lKqQ==\n'))
_chut_modules.append(('chut', 'eJytPf1z28axv/OvuMhPBWBTkN1m+vr0wkzd2Gk8je0825lOh9bQEAGJiEAAAUDJiuP+7W8/7hsH\nSkrKGVsk7m5v725vv25vcd41W7Fane+GXVesVqLctk03iF1drpu8WFXlUHRZ1c9F25X1APXq9VA2\n9UzWa3r1rSvUt/5GP+zLj/rrkA3q+y9Veaa+D+VWtxxu2kK3Pcv64s9f6uab3VBW6ldZ922x1vCq\n5uKirC/UT0KyaSoNqm0AkTYbNrNzHG6/O2u7Zl30vRruD01b1JOFL354PlX29t2z1z++49J1096o\n53lRtPibS75p6vPy4vXZT4CzqmE/U+3rofg4wNyoOvLJNquzi6KbzYbu5mQm4EP1z7Ozrlyrullb\niqyXD2fFx3XRDuIFlT3vuqbjht89fbv69unf3rz4RizEt7CwxayA/06EeAArnF1ssxNRN9DxFfQ3\navCu2xWz2WqVVRWQykIsqUoE09+0Qx/NRVTW5w3+zYuz3QV+KbBv+vJxDX+gG7VY1BRG2DdVserX\nXdkOWK8rft6VXUHQ+g21rK8YdEnPhrys8ctQ9NBAYkDV1xlBuOiKFv+el3VOj3f0eCA0NkVGD4es\nrAhcQT+z60sFq0Y8oxZQxL/1NiNgm6Yf6mxbqO/Udk1FXX/Dba4vioE77CoFbU3grzflmsayvRyK\nLbUq1huaqeu1qjpkhOHFLyVVuNjV8pv8I39z5auKujw/37YFIQozCWumZ+Sq7IZdVsm5a03Di5Jw\n3FCj/qpWz3ue7H6XN+oR7hhqfZ3z0uEDUfZmPwFbuM5h6wPzqIEXpDAB6+s8Trh90a+zlmas4PYF\nNuanUOcUSaluhhVgV+RMUNF6s2141Vqer7ykWdnSOLot/y8fDs0OpvXUkOSjhXBAzmZAbQBX0hzi\n9z18LboYOgKySGazrCqB0fRQKS/XQ0yYl+dr2p2L6Lg/K+tj9VtODM4RFO367hhLrSmDSVzwTM4A\n9GxdZcAqoMe4oX2enMwYfl0OJXT8S5HrbYjPK8INcfn0mWvmxTmMaE2ji/uiOp+LrLvoF5+ioyPY\nJ0BvJ9weZuPoCAjgrOkL9ewzI+V8zrfD4lVTQ32kZvm1H7oi2y6AcaewvWDLKkR5MoAjDFT9xIGH\nTwBVTQwpcmx8GCMgQPNq+fg0cQFhk7IWOJJUjtYFKmnJrrDEVqcGztSSYrVkhDfUSzdZnVejrqAC\nzIZYLEQEPLM4j05G00XlIloexlVxVVTUw9GX/ak4jLcgBYArJ33ktCoqC+y2v5gGugdEX+xplfVr\nlJlJLxys/oy/6Ws/jZ2aNFipcs0SKFaLT3/m4rzpttmwgO7Cc0ldTssLqwUSKi5PrGk1GQ+LwFnL\n+fzNm9dvxjNqw2LZcgdYz57/7ce/32Fq/XYvXn37eubPW9oDoWFFnvREl49JlUHpCpKk8ZHe0/BD\nbmdaMoMTFl53WdsCQT/EUc/Fw4eX1/jNGzFvAwQSJ6EtBLOVDUMXQz3a4UwcyQiqbiu7TYGDQk3i\nx7qZPxhZF3gcIrzeFOvLFfLBWCKJ36G9ZK68csQnE8lgiZ5AYhDjKPvzsgK2ARWsQXZZ2Rfi9VtS\nX7g5yg9sCPrfADwRZDfDw4Gg+MA6yAl7FrpNti1BPGANHqzi8sDlmt2wQM0O5wZZ3oJVuUQx4pTI\nLI5INYwPO5yxwy6JmAHPhT173BMA58pcAUTvAv75M8110+usHGKvtSxi5FLYjiBJ4RdoRrGeNln5\niwXq1ulZHHVN42wsb9ZewWxlZ1UhhkZ0u5oWJkW5RwsnZfFVVu0UEa43GUmgg1+/+BAtT+NEHNBz\nqIr85/37SKFS9rQM9VoCmDNKZZ11NytU5S2sFFT6mxY1GhdxBKysLCNDXNwH/B+sAZxJrFF6EBAD\nmzqHdvQXpq2tMkBpPSdwj8SaW0vCpUpy9CCGYyQ8pHBcJniW7apBbbSDg4PvmywXmUihpsCa2Hvm\nqO6peAZKupx1mJRhU3DNvCmIVnnyPpb9APB4HLJLQFltgAIEaJ3vetj0qjRRvIJQSndtng1FvGlA\naAdaRf+OEmecNo4a5sKMVgFe6EFrfeV5DcpjU8e4U8xUvCQjBDEuuByHY+kokt0YNQV+JONFIm6J\n7ADLYVTI55K5QD3E0AEyfCyummssxlmPpTaaBNUFXvq+BXM1lrPTF+2Ia8nFN0j3AaTnwt4Ok7Qe\nV7CkczHs2gq4qouVGqxBJf2pKWu5zxzJsbTn4VRRsY1jXlT7JhZ/Iqe1wPjzqDQuF0mAazA4nVQ3\nA9JHEoBaTWiAdCNbpGj2xolBArftJUwqYsGg0hKMoD72Jk2uRSyhz6nRaAllqSbWH0DRN9q1pNWn\nAvV/0cgd+qZowaAsYJtm2ItozgWQmwC8tk1XgPKyBQs771NN0Ss0DmB4SJX8gOBJA5hrbPOVkjos\nYVag9a6Yd+PMsC4NP5xCEDSmEH7Y045WgZn2SdnPc57jCGzbwRRpHDT6ThmjMC6To0Gyjl3FgIph\nCq/KZtcH20qvSGFNBxMKcHHQqOCpXHlSBNTjyKFUlOuqxKUMC4xSasz0koNAwpN8BFc22g3nf4lc\nLC046qtbQSsJ/MXGDn0RhoJd/PjZEqoUVRWdmtG2TRtjQ2ec9kzwckQJWgtPJoByFYQqnU02VkC7\nIHALua63YMj4eE2S39Ar7obJvuRS2l1S/YDCzjRJ7AarWJyLlH4Ew1Ww1OcWflOzk8xTrDW1dfRe\nxg9wF4udMf9zVg0qpOcZiM/cxYPcojGW8pTNSbzbpjQj9lfYIsCchxuNJjM0VHN6H09iYbgRkVVJ\nxkcV8TcgJ8x+q7JdDep3Ls5uSPfAYStFAz/IfVttcut23iBsdRQ/3Bns5RYWsKpABE/AObXnCHhr\nTC2JnvEXOgCCAttiEvb4puaKZz4wTbiI2LXNz5WLlhvZkwHsot3tW2jlyaJ6cr2ncOp363VR5HvR\nctdKt7gXTjg6xke3D06pBASz4FM2lrKgmBoKUWpgHJJX5LLGiPzsgRABWDIGTDXkxt62VfIHKIu/\nSztnisAQrKp66oDSE3cWva8jVrDklnOMJgs/Mh2NJscQ2GxBP7tvtIx6kuuQF2ScODIFHdQXNZCf\nx1A9scsQ/MWxK02tkdJS/FUCRYRNX3hsJsiS1o70Nsb+Bo0UXU3a1eMFQ/Bg/oCNMcSP57qBO0ir\nN/V13KPa5wBw5o9qVQGVSc2HpOiC6NVWc7WuNSY4pYu5mJP4gVUtat6hpp7r2GK/BFl2QRjLxydP\nUA4uA84MCxu2e/U+5p/TuC4JKHq80V18Opp08vX14rCPxKGIGRrQmFCErjS2JAm0hP+DW0Bb0NH7\n6ODhV1//GvBOAqZsZG/zcaHpAszsDl2HMfz0cNAzAjv7crwk6DiCJcF2lrj3/XL26vHopXmXjIeU\nabYxXkEfVmbAjGgrM9DoETJwj96QNoPcV6+MqzrLUtImb9nYZg8EdrfZ2bSGsARqyKr5SAmzGB3U\nn4u3eHAWUsKQ1PhUzdW6qwCQH27Q4JqCcghGHdIr0p+2CrU/0YMe8sT2knhdtkAMAYXaiNY1NfWK\n3kdTjzQaiV/V8mCjxFIWzy4CYu/NrrbENsz0Wba+vOiaXZ2jNUlwUdmCAQ6kceXs+ZMWpy0V2/vY\nS3ttNFwhYzuWtU8jDjU4VLtcW74zrIx7PMiKkKmd+szIcu7OQmSIIH879clh4apjrMHKMpoNrdyH\nEpn5MdQ2DYC7a7dq+aDOHUhXMpER9eIDx+QjI3HOCpnNhdTH9VQHOSthv6D/tfuafNlTtZWze1Q+\n5twSV+lvNNiPaxb11cqzdfm4Gf4PjOsePvUJpJYE/5TM96vVuJYOj/A/reeaH5996DFx3IR0n4eh\n8S4lj28cwNXd4IpBteO+JolUcq52j7oO1QN8C/dHnnW5tgXOtU2YiqfSL11wrAXsXxR2taAIHxis\nz7VoHMAeHUvE2oXtxB5U2Af31Xjv6OqyJo+ZZMe2GDZNroe9zdp4jaFItIiuAto01aovfzEH2k27\nauoVWnC7rljII/KAN01y+wxY/LDeqBnr0T0vt7HAfxyCA9WwJ6xlODhwQg3tptnZ03h5HdzGcvsq\nRr5nC4e2bmKBV9vUJ2c0mtSUhA0xGTW03VVDKcdiu8OcSYVBePXSdbtbrUEeDo7x3ONBAoo07O9U\nPBRV4StEE5KvrPPiIzx6bNvFq/FTNluIQaK9GHZnyPNiWjjEQFdLxFdmVAEWjn50xcsejzfs2ILM\n5uSmCUghBW+ZnY7KpJJe9fHDbNxL9lukiA9kxH9imsu5YNnJvJA3RBJozhP/aCGejJTtUsIgW31i\nAfDD1EDsjV1IoemUlSatT/XRFvhbZn2te0gatj+U10SpU57HYV8byzeHa8hojhfSasG+IvRGAH3F\n3GA/WsqZA23oLNzxOYUayv21LE/HjgT7Y9a+K7bNVQFrr9ZsYqbYxaS220KU4VWQ2K8mqMP+3JRF\nlVsYT3UrCeBr8Zh2q8e3p9GQKpKjIfsfolaL6m+jWA817fpU/PPWmJfQp00vyyD1qw/ZSqxM8Jou\n+I/bAiN+0r4qijZOn/i+QbkgXxGzk3Oe3I6uu0YazsjLZq+3FsZ04IvnePrECn+4h6Yes8QKIOuq\ncj1SGej0/B/FjQxa+FezE2tQTZq6uhE7KKJGveVaC9o8XuFSBeGSr8G3WJaIzunIDc3KXdMBo2Bb\ncXn05NQbNmGjxw2j6wZWOcaG++9BkACfINzfgCYpXytfRywajHNCf+cP//oT7Tj0naIoJSeqY92h\n3NFeBma3JwH6kWcq7BLFNknasS0OnSX3OVbWPjI6oCF2YJ9nTgoJ34lq65t39paMheuEaTk+7HPc\n7QFw/oHbLXAnT95CmP5OkOa42iyysx63TD1U2WQ9n8iq01iUriGMzEGHE9/UhRyV+2PSg1DPIunh\noQNs7iOZAO+duUji9fnu2FbR7SKzVTxYsCySBkfwHPoOnWbq1QifEsin9HgFlTsK0VP7yuFRJo5A\nhxOdhFnIdQecwoqCiq7PHkXOtu36TXn+OwBmPsDGxLI0YGx1Lguwz2ewVG9ZPHxgQ9gjLqqGs4Z/\nJ81V7jDkhjovgUhUe93d8vHpuFbqnauE+BCB8Vm95vQOF0rEI1Pidh8WdTbHNxQox09CA8VAECFr\nAVBFHcsGWVsfuluaKMbU178UXSMpjgG4QUo8Cjd+ZYpGdMDQQ+21R4lgxWC4FFi0AVkmIfJBhD2r\nZDHZAHjSGC+aOofgxu5LmsjHp5MhL0QOqFyiWOmy+gIEXyFdy+JIPJmLx3Nx9CTMlVEbtiHzI2w2\nPhJ3jsp4Z62GRm3EfK+2xZWCHhprnkk4AGMh4XCeh+h56lx6zB7vpDVQxTxlNsErNdmpxUwjh4dw\na5chzcUWuPgkMzHVyto32DFkXwdlLsQfQxjrLWgiucYi6w7tfC+zJz/0Ip/vPR67LoeNICveGz7d\nAQuc3N2lGxNpEIp0sd2eE5ZKQFDRclkH5nNZ6ul9lkb6Gw7p73JAfzuWFrUpzZ6UiNEu24Ot0oKm\nI6FpKrXaxaqQjHaewNd3fki0vHLj51Bbz6bQoF+DKlqP/NquT2MMYozCnXwaU/PPpGUTCXlzx/M/\nfaVn3/0WKyJrRPB7NVxnfgO3RwAbuuUYOxU9tuZE5Y/F1VxMNL6toQnbJtUmttj9wcHBjz2sxdAA\ny6Orp30DDC7PBjritqPFZpIqmYCkdus5wVzz0o5V9eOl+x2GIb+Vvm2U2qlu4UWVOrH7btFKnY+Q\n7KWy8VGIdcbg6we2baK7ohufxaVvn5gKKRbbzt8pMMR3Gx+Q3n/ugMYMfArslPXkxM+rmw4jN2ZY\nCIWVg/TWSxvB/unWiWkfOEIL4hAegzt3c3Etg+bdYFD8kCCFovOcpN41WSqRX0eqFQHMoGxdNX0x\nDvbr/gN6rD0f99RS7iXJ70PT+NlD1/vATREhX8KnCH9Etjn7yWln6xL4mVKJUjMxPhHtVf8Mo2Mx\n2BlG9xTjPDC0m6YT1IQuo6sP5dluQF8v1TsyEZjytyWZjoSlnB0JS35qBnnXk1hrEOaeAiniij3f\nn5vZE4P5DWIl5cGc/U0EvEnxDh+HExJEM8F/y3rvToW+Uk2Rhhj1lZiQEufG9bSUkLesdBCeH5Zt\nbh3iF69QGsGfPo+fe9cwJF2HYwLHjfjC5iO+9uAFCNIKAw1y1AKPAnboWVVwNJIja7hgpI5Y10bt\nW6nB0NRpvUYBy/L8O66gwb0l9UY9Nfcikn3mQxAxvPaaeK7uO9w8QnKgEns2qIxvalor6F9KUKfj\ndN9mQZ0EBYcQMp5yQZ1ZcZh8YYu6TybbqmVduMs/WR9JORBv5t2mSjXVj9fq8noZURnZ1e4lHfyY\nKeHbV1AJZa8cDnGJeYLxMBOc0bRU7kB9GkMOGr1yd3ajRF8d9l9j7J6zGTVL+AYWKEa+oJgXpYKw\nLv+bjgxbmVMmlnFfNFQs0v3gmG/UqD9FWBadUMqYcs1RIFQ/+ZyoiJu/erlRVO846ap3PFUxnY+i\ng/j8wo7uOgciq6qbkcxFZ7qlDQej2Fh1lsFnvnMAP8ZOiEiZl7EM3a6uUXAddu/rQ7y3TGeVIRuC\nZtA1B+wbJmr0cvAqZHj6Ipm806avVEmbt5PxtuNQSoI+uj6uO1/nEkZediA6ms521IIQ/WaDrjKy\nO9a7rsP7eLqmHTWjHwpzQRZ4XIVfYgPbGJ99ut7A81BZUV+lmKJkYaBas3UdurthsplQz9lZTx1b\n2U0SG9s7VLekCdloYatJAmIzztcl+36zX56/fftdLHO4PJTrorYum4tq98pRPtXhTXFVXsKqFP2Q\n3O9K7+/l/xwG4/Ibu/y3yIcoul0KLGmHRUcRiH3iofcVBFPcW4XD35eDK70WltBfJFhRaNBdFZ2z\nNvoOwJgeWpsr84nYQzcEC9MXyXUj6tcFP++aATlCdBDZa+nG/O03FyVs/DN5y9/uiv5O1pQzRkAf\nyTaPVNKCNlHPAixotEuIb75qhhfbtiq2wHuKXAYbrHN9V19cN90lmxA9Xdvcxyr2gESOsx/mWPfH\nQe5T+k24tnfS3w97pPphf6KFOvYwfR4/KSbCVxCy8IUZl1yyuZgO0tahaZnv0bIrhm1Ip7nlUuqu\nLIGG+8m9s4PzD2P05vPJySk8jcZ0B+BitFdccSd368sm31XFP2WqFspcl/Kzdze2Cw7VIUH3ySmW\nNM9H1ilncyOofKNuyoLaNsC3ENQoa8xeC4qWSyquy4PV6mxXVgOs0Wp1MBfwO2/W+DXMBKG8zdaX\noGOp6mj5w3fvlkDvaBGsx6qFILz5ETl0Ex9vZFWEt9MiUgUg05ano0YosYKNuAAaffrsNYIaGMva\n5O5jedsf/9xD/Ckph4meZP6xaLQZvIWBqpR3LBQuyfdix8Y1QT4db4o7hUcwk7LSAOrgKp2IcNiA\n+tnDn2wwTIsSlkTTXlC9pOHgb1untOrusUhDDZnUueVtZs5MJiGE55hvLZlhJkJBiZjwMSZoijk7\nYTIje94vk1mlZqSi+4WcxTCZAQ+o/TJ8hu0+rket6DJB2WDxDDRRKFe5VUwaFZ0vo0d7iuwsThkg\nUyjJJ5RjjjIbJTMkcCyRih1nQgQMxELKRpnfhiyx1ZaYEu4OlZvppk/5Yb9kckQNxuVntGb9Zi5U\nnrxgw5QvDE205lxMMuvT7EHoM3sg3tJtBFj4uugynCzxYKIuD0rlh4wfym8oeceSC7UnzWvzAiUF\naBklX+fKhEmPqHR5vAl6nA7Nx2O6C4pjLT4W693gunWueB2Vug9WBWW883+7zSXHo3tMaJHI3lfw\nff82lr1hG5zvlUFbPrUgze7GGbwBWDmE7MCyK5k48t/H1PEx/U6c5F1kWpUtiI/rumqyHPSJ9eaW\nzsNtwujovqmOxYv6TUppIePoqOXbRgGYXB0U1RXUtDrgPDyUlyuCUpOPTFWVRgtBhQZ3GA97QpYS\nADoT1eMZczZDpkLmV7GfaQx4qykE7Cq2XmeeWtey7V0qlweZQprTUG+JBVYpf7sK0/Kqp/ATTYHN\nMLT9yfFxl12nF6DE7s5QWztub9rs2FDj8Tbrh6KznqTtTWTDAtAp/AE235XFVRHDd0D7eNi2xyu3\nlb3QS3cfncKSvxWhRnOi60R8bcWkA51023jUx8NI3TF3LTsUDnH0gjPLkUemT9MUtWfcCEw4zro5\nFAkUiPKFGoujn1+iHe7U1qhpLuDtaLPIu/aiy3KyxI6O5A/NlDCvpi2WYw1KNQPxJb/eIQhcZ9Jz\noxoDB5ZWRTId5ZjPu6L4BbZnorJ1BWmVblGQVtP5xE3XAHSqL0n9ujfHqe/siTsMDRf0R7whdb/l\nnFhSYRZjenE1rfo8R7IHTKd7M2yaOhoxU58ebuU8Y5FwpeQAfhreOrDZDFagSVvbCViVIil1a1Na\nN25e5kCCLQyxAXkNCzo0YsguC9ApuwJvximIIGNB8jag3gzaqGlIHUJqMDfiYE//PBcqRSjMz//h\nFxG/alSoUGS59k0CUKj5jBQ5PC0V8UtM/SKjOY5Fm58JUCXkPRIfwgb7AxZAKYbfbpprVIJ7QU9k\nzWTSCtOWMip6IxvMnTg/OpzqGE2VVEW6OGtSaNtGC6VO4+x351tOOU2nPf7ZLEaFYzUEMXEILDtY\nXp7a/V56BhIvl0LNLUMHvPLXQT0/KJKes+/f8wsD2faw6tJFcYtyQlWFm+hL65yr1TaDbbSKTmEq\nZF3OjH1Zg/S3RAenZbIyaOghWGcOEoLtoLUPL8bXEyYOFOXMcLIQL2pYpaIfnbZ6vjfZQ0Q06HhO\n5ZpMrKssXXLDqesIEVS7I1ReWscOQ3zJsiZPQeRna8RP2E3DsOz+mNoRm9HQsXLwqqqBFP2ISY1P\nxGHbNRdutgqZUHO8zDohaLQiA8rrmAHD/6YeQ5c+lqlUQtGh5GUkmKF9AGegJ1kp3uLt4onQGtSz\nqDzFFBNAJIkTxe11XN1+WxI/Ml30p8cnXx32nz89+Yz3fA5FJcfDhmSo4XT4jgf2j48l2GBlyUai\ncCkyNqihqVFO03S/BO7RAvtPOUN1jPw3PAR1JGOzMPXh9e4KMF3P4ihWq5jER8vHR/9z+qhPUD+U\nT+dY/VZ6eV9jARLX+9qbVItZwv+zERHRGwWcfSn59C1cnBue+p4+J/CEsKVr8/qsADjUjhSWUWCl\nfGsFbVIbHPRg+3NVe3nt2dXNhgBr1OwJNQJCWMPQlfUTniWoL5vFCoS+HCDBuUdNqrnKD64EA93c\nRG54u6rYmXhYJa1uCZ9ANOz5kAjKEu/yZigvhdUlxfNoWB5j5YQU/yhuzpqsy1/UYGZ1u3a4m/uP\nzadyiJ8EoT5XDqq7QQtN9mQydmqAGngcfS2eI9qohLPuK6hV0aUizB74A9y+EBviFSjc5uJn1DVB\nTRzSaOois3zfS34WLIbnIID6YbWFWsV24lau3EXjy83TrJHcrP427Dh7He4ibGkWoyv6PRcjJw9i\n7NMg2tR+Ve1wJoWE+xxpZVLB/zv72zBq2dPtpScOk11IJZbOJzIKubB025QvYW+zG3pPTYYcrJHM\nSOmRdLSsacbk15UanfBfdOEq2v4hHrMAmazf+KqQCOFZRHlfzWP50GYVBoC7jDk7VMkhtGfby2pu\nzz0Ylxk7ef3+raIQnIDPi0owe20O7PWY57mfdn1hdV+DZ9j4x2awOqGPZG8Lnb/NHo3hnJRBV2nV\nE5FVJW7qFqiy6BY2FOt5ZJm7HqIyAM/Js6uOCzRn5INhRS5M8NyNfMRHQ9ZuclqYc7PxJQJ1nKFO\njfhYy+dkfGIEhEmMBUgTYekaSulkMFrldGiO6jiREBJ1j7YwKn+hXmyFY+ybXbcu3A6tmvx6LDlD\nHPwa43u10D2H6a7B1qBQbazup/jAJkjvFFeh8NGZQjAv02GXJKwxxjJfPIIZy3fVWL/4AkEHOZZb\nc2LBlOn1UP7cF771gDOTqaT7kleByM8qjF++ofO88rz0smk4YxYLMWFgpk49wxRYcD5Vh7eBNFEP\n0HgSvHryRV2lDUKSlex+OdpaEawbvUKLeCh+s3P5o/PSwliRnGsu6IBWNY0Tnasr08vxZou3fAi5\nRbqVLU49nehWpWE8FeFZ9bFyTWjAwtAgnYnaQMYCWUF69HsoXJKuwlSTq5KOo7B+Ci3i7FPh3Aac\nUjJk4EpWaAU32xzbz+0kj5gCh1DuqyPkVKxkZYuz8KAmmlgnkxIBN52bqwToE40erdcCDcunX4qj\n5+Kv6cPRu910Z8keaEvKqCXonM4vRRGeUlqMHgNqUMaCEWVnYbXgmC1RNU3LznT85njSSdAdVWHv\nOgdoBl5UY+7A37oFJhK3bPE5LyFGuRqImPVjSN++W7189+LlczfmBtW6lX6FFqqwGJSEObedafLf\nRiEJQLdefnlyKrOgRnGU+C4r7bl03NdauWC/yNirMvKQ+C/3IbAJJ+WCZbijAeNPlAQzNU1W/9zy\nq4WEEVbcUXMta89hZq7kcG941yiavFmr77O8/ebNix/erb57/vTZ8zcq6Ir29iNLs3kkvn/99Nnq\n5etnP37//G0wK9aUmjrqMUKS5UnWR4EHh/2BZGySL4StHANEGk2HPbdSPOPWZqiwm8CWAyU7D05G\nbpBxY/x12KeYMFYyYdWt9Lvd517Z+AoVLRZA3OPIUqig4qZSkWiaVmrAVGTo/g+017oHqpS3TMbB\n+9qbS4PACTuXeJ4OYJ7GK+McOQEbpjcoxtEjVCLkbvG3ZiiwQRejzW4q7IvNw4/kOToPb6DDu0cr\nyfB4ee8YjH1ti7IX34eu9EvGYdKkrpo1mWG2KRmSE2OmFWhpD9rOLq4VA93G1pYc0GjATUBWBNzz\nWkqRWr15LtCuWle7vFg8TNubkHy9lVZ1n+JXC/iV6IEKj2SUn+8WJrmjciMYsaPxDN0S3Dc7AR3A\nX8WZy0hRIYxmD77Q79vEo87D2LIyk372QLzDEzxjBKgOc+YOFK0knjXi1et3osjLgU/8EJsUGj+t\nKszd2eGrxWqYBGgET84KmDIwp7OBLIwaBmTFKaWzmTmuOlSGNeDivsB4Ln7q8W1GFCE6p1cfkwo/\nx3cnG2VrGX3z3Y/vXnz74vkzcpNGT6IZ5hhgA0UCX+HmBHmNPOJPM9+SAUqGmUordWIxswWNnEaj\nTJMNGFamgViha0d5tbMvQ0O6J+ItvTQq8Y8O6N4N50d/iVT0k82/pVJydjOA0WeYmgRChiweMUtT\nVhq7nNdBGrv4VVIRW+l+DK4F9qJqznRK5eTOgyTs9gxT5plwhklDBfYpQVDPoQmgOhH+r5eC6kZ6\nSOlqhfiuVkoRt2Apx0IgohRbjiL/AgjYZqSy3jE0lqORMSRW0jHGFLiE5QTwfcuvobaj9rSXEcq8\nV98a6yVKWUhmZ2zvOSzZsPJup04v8CKYEmkBP+n+GKdzxRtsV4zsMsjccedJFXsDQ48tdP1XENAE\npNkZVI/HCbujVw3eO94oBD49/pyKp1cg40hmq+6yrgBh/74+Ep+efHYt4EQdeWl1FKupN0Eopd/x\nOpnXdnv+rIKC1dTxLqPOU+sOirimHBnYGBhB08vq6aZEopeJg/C6OF9hi3zDAz98zIHwYw5UFUe5\n+PcxTIL49VdBzkz58w9/EKS6iP9+/Jgf/e/e4wHB79AW//Xd65fPsXpk5okUaKn9Bi7RFVu+feLd\nk+mQQYc0GGuVW4zG1aRwjHeI1KowWL69v3jcwDD2iuRdX1BW/QVlV8EZcgPFOXDWc9zxi0FwupBK\n1HhVz+5LKLwMJGYh6P5TOAe6ObqwLtXIwU5crTk4OPi7UtOIbSiKlqcCBWVfVLqHfXXOfueueY3z\nLe+TNvjq1/byO4nN8/HV5n8+ffPK9cria1GDr3tB/hOlkWt5K+zDl17MWYrl81/YDMOoe0EsAy8U\nvhcXsv2sI2XYMNBJ1mmv5Y9txS89lewK7XV8cWwJ+tOHD9T0wwfkVkjAOdpZ6iIhGgi2B0seFGIr\n2ZNs2OJNF9LvP/Cu+hD14gN08iFwsZKdxzgI5DPR9Cisy5L4ror/yJBhjHhqSS/N3T96s66YAO3+\no8cubhm+vAMwPX4AJxYkc+GHbVJ+4ZiUlso07UoeaxD/D189uyc=\n'))
for name, code in _chut_modules:
    if PY3:
        if isinstance(code, str):
            code = code.encode('utf-8')
    else:
        name = bytes(name)
    code = zlib.decompress(base64.decodestring(code))
    mod = types.ModuleType(name)
    globs = dict()
    if PY3:
        if isinstance(code, bytes):
            code = code.decode('utf-8')
        exec(code, globs)
    else:
        exec('exec code in globs')
    mod.__dict__.update(globs)
    if name == 'chut':
        mod.wraps_module(mod)
    else:
        sys.modules[name] = mod
from chut import env
# -*- coding: utf-8 -*-
from chut import *  # noqa
import sys
import re

__version__ = '0.8'

_episode = re.compile(r's([0-9]+)\s*e\s*([0-9]+)')


def extract_numbers(f):
    season, episode = _episode.findall(f.lower())[0]
    episode = int(season), int(episode)
    return episode


@console_script(fmt='brief')
def vlserie(args):
    """
    Usage: %prog [options] [<season> <episode>]

    Play the serie contained in the current folder. File names should be
    formated like SXXEXX. Also load subtitles if any.

    Store the latest play in ~/.vlserie. So you dont have to remember it
    yourself.

    Require vlc or mplayer.

    Options:

    -l, --latest            Play latest instead of next
    --loop                  Loop over episodes
    %options
    """

    config = ini('~/.vlserie')
    config.write()

    player = config.player.binary or 'vlc'
    debug('Using %s player', player)

    def play(filename, episode):
        filename = path.abspath(filename)
        dirname, filename = path.split(filename)
        cd(dirname)
        if player == 'vlc':
            cmdline = '-f --qt-minimal-view %r' % filename
        elif player == 'mplayer':
            cmdline = '-fs %r' % filename
        else:
            error('Unknown player %r', player)
            sys.exit(1)
        srts = find('-iregex ".*%s\(x\|E\)%02i.*srt"' % episode, shell=True)
        for srt in sorted(srts):
            srt = srt.lstrip('./')
            if player == 'vlc':
                cmdline += ' --sub-file %r' % srt
            elif player == 'mplayer':
                cmdline += ' -sub %r' % srt
        subs = find('-iregex ".*%s\(x\|E\)%02i.*sub"' % episode, shell=True)
        for sub in sorted(subs):
            if player == 'mplayer':
                sub = sub.lstrip('./')
                cmdline += ' -vobsub %r' % sub[-4]
        cmd = sh[player](cmdline, combine_stderr=True, shell=True)
        info(repr(cmd))
        serie = config[dirname]
        serie.latest = filename
        config.write()
        try:
            cmd > 1
        except OSError:
            pass
        if not args['--loop']:
            sys.exit(0)

    serie = config[path.abspath('.')]

    filenames = find(
        '. -iregex ".*s[0-9]+\s*e\s*[0-9]+.*\(avi\|wmv\|mkv\|mp4\)"',
        shell=True)
    filenames = [path.abspath(f) for f in filenames]
    filenames = sorted([(extract_numbers(f), f) for f in filenames])

    if args['<season>']:
        episode = int(args['<season>']), int(args['<episode>'])
        filenames = [(x, f) for x, f in filenames if x >= episode]
    elif serie.latest:
        episode = extract_numbers(serie.latest)
        if args['--latest']:
            filenames = [(x, f) for x, f in filenames if x >= episode]
        else:
            filenames = [(x, f) for x, f in filenames if x > episode]

    for episode, filename in filenames:
        play(filename, episode)

if __name__ == '__main__':
    vlserie()
